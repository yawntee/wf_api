// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	gameUserFieldNames          = builder.RawFieldNames(&GameUser{})
	gameUserRows                = strings.Join(gameUserFieldNames, ",")
	gameUserRowsExpectAutoSet   = strings.Join(stringx.Remove(gameUserFieldNames, "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	gameUserRowsWithPlaceHolder = strings.Join(stringx.Remove(gameUserFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"
)

type (
	gameUserModel interface {
		Insert(ctx context.Context, data *GameUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GameUser, error)
		Update(ctx context.Context, data *GameUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGameUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GameUser struct {
		Id      uint64 `db:"id" json:"id,string"`
		User    int64  `db:"user" json:"user,omitempty"`
		Name    string `db:"name" json:"name,"`
		Channel uint8  `db:"channel" json:"channel"`
		Data    []byte `db:"data" json:"data,omitempty"`
	}
)

func newGameUserModel(conn sqlx.SqlConn) *defaultGameUserModel {
	return &defaultGameUserModel{
		conn:  conn,
		table: "`game_user`",
	}
}

func (m *defaultGameUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGameUserModel) FindOne(ctx context.Context, id int64) (*GameUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", gameUserRows, m.table)
	var resp GameUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGameUserModel) Insert(ctx context.Context, data *GameUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, gameUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.User, data.Name, data.Channel, data.Data)
	return ret, err
}

func (m *defaultGameUserModel) Update(ctx context.Context, data *GameUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, gameUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.User, data.Name, data.Channel, data.Data, data.Id)
	return err
}

func (m *defaultGameUserModel) tableName() string {
	return m.table
}
