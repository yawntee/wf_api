package bilibili

import (
	"bytes"
	"crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"encoding/base64"
	"golang.org/x/exp/maps"
	"net/url"
	"sort"
	"strings"
	"wf_api/server/util"
)

const (
	appKey        = "9618d7d201064f80a01329dfbc4da9e4"
	rsaKey        = "\x30\x81\x9f\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x03\x81\x8d\x00\x30\x81\x89\x02\x81\x81\x00\x9b\xd2\x51\x71\x0f\x53\x89\x5f\xeb\x03\xbc\x6d\x67\x9f\xe4\x06\x8b\xde\x70\x21\x13\xfb\xd5\x8d\x2b\xda\x3b\x38\xec\xd8\x13\x99\x89\xcc\x28\xab\x70\x55\xb4\x5d\x72\x9b\xdc\xfc\xc6\x1e\x39\x03\xf5\x39\x40\x94\x71\x00\x81\x25\xa2\x96\xa5\x3b\x6c\xb8\x87\x85\x3e\x05\xd8\x94\x8a\xbb\x96\x8a\x0a\xab\x12\xf9\xc7\x30\x76\xaa\xe1\x00\x8a\x74\x55\x45\x35\x9a\x3e\x90\xf9\xbf\x44\x5e\xe2\x7e\x1b\xe9\x26\x66\x12\xbe\x01\x8d\x58\x36\x42\x15\x6b\x54\x4f\x20\x1d\x69\x05\x42\x54\x59\xc1\xfe\x5f\xe9\x3a\xeb\x91\xd3\xfe\x05\x02\x03\x01\x00\x01"
	checkLoginKey = "\x30\x82\x01\x22\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x03\x82\x01\x0f\x00\x30\x82\x01\x0a\x02\x82\x01\x01\x00\xcc\x30\xb9\xaa\x5c\xf2\x24\x65\x0f\x3c\xdf\x22\x7b\x06\x32\x54\x2a\x38\xa2\xfe\xed\x64\xdb\x67\x0b\xf4\xad\x07\x4e\x1d\x47\xe0\x33\x53\x5f\x87\xb6\x5d\x5f\x28\x67\x1f\x09\xb6\x6c\x56\x75\x4e\x03\xb3\x05\x76\xdd\x6f\xa8\xaf\x43\xa6\xc2\x6b\x27\xe1\xe6\xa1\x2c\x3e\x29\x0b\x87\xb9\x8d\x15\xdc\x89\x45\x96\x1d\x7a\x68\xde\x95\x9d\x96\x96\x58\x8b\xd1\x2d\x98\x14\x0d\x08\xc2\x28\xae\x4f\xf1\x91\x36\xdc\xc1\xd9\xd7\xea\xeb\x34\x4e\x69\x46\x82\xbe\x92\x11\x37\x64\x72\xd8\xe8\xa9\xba\x9c\xc4\x19\x43\x89\xc0\xa4\x18\x7f\x12\xf2\x19\xb1\x3f\xc0\x82\x9e\x6a\x18\xe2\x39\x06\xa5\xd6\x00\xa0\xf1\x85\xb7\x25\xab\x3f\xea\x76\xb8\x30\xac\x02\xac\x4b\x9b\xe4\x5d\xdc\xe8\x94\xfe\x91\xb5\x5e\x89\x46\x83\x55\xc6\x2b\x68\x08\x91\x8c\x08\x8a\x7e\xb2\x85\xfb\xbd\x31\xcb\x53\x0b\xb6\xd8\xe8\xaa\xf3\x9d\x0c\x8d\x1d\x42\x1e\x89\x00\xab\x18\x24\x53\x4f\x81\xf0\xcc\x8f\xcd\x34\xc7\xff\x7f\xe5\x49\x72\xe6\xd5\x05\xa8\x83\x96\xdd\xb1\x12\xc9\x82\x25\x79\x00\x4a\x4d\xbd\xcf\xdb\x98\x25\xcb\xf5\x28\x2e\xe1\x09\x10\x7e\x8d\x87\x3d\x10\x9b\x9b\x02\x03\x01\x00\x01"
)

var (
	checkLoginPubKey *rsa.PublicKey
)

func init() {
	key, err := x509.ParsePKIXPublicKey([]byte(checkLoginKey))
	if err != nil {
		panic(err)
	}
	checkLoginPubKey = key.(*rsa.PublicKey)
}

func salt(str string) string {
	var builder strings.Builder
	builder.Write([]byte{str[2], str[12], str[22]})
	builder.WriteString(str)
	return builder.String()
}

func sign(str string) string {
	return util.Md5([]byte(str + appKey))
}

func signForm(form url.Values, feign bool) url.Values {
	keys := maps.Keys(form)
	sort.Strings(keys)
	var builder strings.Builder
	for _, k := range keys {
		builder.WriteString(form.Get(k))
	}
	sign := sign(builder.String())
	form.Set("sign", sign)
	if feign {
		key, err := x509.ParsePKIXPublicKey([]byte(rsaKey))
		if err != nil {
			panic(err)
		}
		enc, err := rsa.EncryptPKCS1v15(rand.Reader, key.(*rsa.PublicKey), []byte(sign))
		if err != nil {
			panic(err)
		}
		form.Set("feign_sign", base64.StdEncoding.EncodeToString(enc))
	}
	return form
}

func encBdInfo(bdInfo []byte) []byte {
	size := len(bdInfo)
	var buf bytes.Buffer
	for i := 0; i < size; i += 128 {
		end := i + 128
		if end > size {
			end = size
		}
		encInfo, err := rsa.EncryptPKCS1v15(rand.Reader, checkLoginPubKey, bdInfo[i:end])
		if err != nil {
			panic(err)
		}
		buf.Write(encInfo)
	}
	return buf.Bytes()
}
